import telebot
from telebot import types
from llm_core import (
    init_db,
    add_fact,
    delete_fact,
    get_knowledge,
    reset_history,
    ask_ollama,
    add_message,
    get_user_history
)
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
user_model = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –ª–æ–∫–∞–ª—å–Ω—ã–π AI-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Ollama üòé\n"
                     "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π /model —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å.\n"
                     "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π /addfact –∏ /delfact.")

@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id,
                     "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n"
                     "- –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É\n"
                     "- /model ‚Äî –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å\n"
                     "- /addfact ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
                     "- /delfact ‚Äî —É–¥–∞–ª–∏—Ç—å —Ñ–∞–∫—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
                     "- –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ Ollama")

@bot.message_handler(commands=['model'])
def choose_model(message):
    markup = types.InlineKeyboardMarkup()
    for model in ["mistral", "llama2", "codellama", "gemma", "phi"]:
        markup.add(types.InlineKeyboardButton(model, callback_data=f"model_{model}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("model_"))
def callback_model(call):
    model = call.data.split("_")[1]
    user_model[call.from_user.id] = model
    bot.answer_callback_query(call.id, f"–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {model}")
    bot.send_message(call.message.chat.id, f"‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: *{model}*", parse_mode="Markdown")

@bot.message_handler(commands=['addfact'])
def handle_addfact(message):
    try:
        parts = message.text[len("/addfact "):].split("|", 1)
        title, content = parts[0].strip(), parts[1].strip()
        add_fact(title, content)
        bot.reply_to(message, f"–§–∞–∫—Ç '{title}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        bot.reply_to(message, "–§–æ—Ä–º–∞—Ç: /addfact title | content")

@bot.message_handler(commands=['delfact'])
def handle_delfact(message):
    title = message.text[len("/delfact "):].strip()
    delete_fact(title)
    bot.reply_to(message, f"–§–∞–∫—Ç '{title}' —É–¥–∞–ª—ë–Ω.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    model = user_model.get(message.from_user.id, "mistral")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    facts = get_knowledge()
    kb_text = "\n".join([f"{title}: {content}" for title, content in facts])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –≤ –∑–∞–ø—Ä–æ—Å
    prompt = f"–¢—ã –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –û—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Ñ–∞–∫—Ç–æ–≤:\n{kb_text}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}"

    bot.send_chat_action(message.chat.id, 'typing')
    response = ask_ollama(prompt, model=model)
    bot.reply_to(message, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.polling()
